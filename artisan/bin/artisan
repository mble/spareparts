#!/usr/bin/env ruby
# frozen_string_literal: true

require 'optparse'
require 'erb'
require 'pathname'

options = {}

option_parser = OptionParser.new do |opt|
  opt.banner = 'Usage: artisan COMMAND [OPTIONS]'
  opt.separator ''
  opt.separator 'Commands'
  opt.separator '    go: Generate Go project Makefile'
  opt.separator ''
  opt.separator 'Options'

  opt.on(
    '-p',
    '--package-name PACKAGE NAME',
    'name of the project/package you are generating for'
  ) do |name|
    options[:package_name] = name
  end

  opt.on(
    '-o',
    '--output [DIRECTORY]',
    'location for Makefile to be written. Defaults to stdout'
  ) do |output|
    raise NotADirError, 'directory must be passed in!' unless File.directory?(output)
    options[:output] = output
  end

  opt.on(
    '-h',
    '--help',
    'shows help'
  ) do
    puts option_parser
  end
end

TEMPLATES = {
  go: 'go-makefile.erb',
}.freeze

class NotADirError < StandardError; end
class NoPackageNameError < StandardError; end

def prepare_makefile(kind, bind)
  template = File.join(File.dirname(__FILE__), '..', 'templates', TEMPLATES[kind])
  ERB.new(File.read(template)).result(bind)
end

def write_version_file(output)
  return unless output
  version_path = File.join(output, 'VERSION.txt')
  return if File.exist?(version_path)

  File.write(version_path, 'v0.0.1')
end

def write_makefile(makefile, output)
  if output
    File.write(File.join(output, 'Makefile'), makefile)
  else
    puts makefile
  end
end

def execute(makefile, output)
  write_version_file(output)
  write_makefile(makefile, output)
end

option_parser.parse!
b = binding
b.local_variable_set(:package_name, options[:package_name])

case ARGV[0]
when 'go'
  raise NoPackageNameError, 'Package name is required' unless options[:package_name]
  makefile = prepare_makefile(:go, b)
  execute(makefile, options[:output])
else
  puts option_parser
end
